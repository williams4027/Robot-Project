/*********************************************/
/* The Magic Conch                           */
/* Team J-6                                  */
/* Begin Date: 04/26/2012                    */
/* Purpose: This program will be used to     */
/* develop motor commands for integration    */
/*********************************************/
//Libraries to be used
#use sencdr4.icb
#use sencdr2.icb
#use Robot_Global_Constants_REV_2.ic
#use Sensor_Functions_REV_2.ic
#use gps_module.icb
#use gps_module.ic

/* Variables that can be used by all motor commands */
int resumeMotor = ON;    // Move_Straight and Drive_Straight functions
int tempEncoderGoal = 0; // Move_Straight function
int leftMotorStatus;     // Move_Straight function
int rightMotorStatus;    // Move_Straight function
int finalHeading = -1;   // Robot_Turn function
int continueTurn = ON;   // Robot_Turn function

//---------------------------------------------------------------------------
/* Function will turn off the drive train motors */
int Motor_Kill()
{
    /* Print message to signal command start */ 
    printf("Motor_Kill Started\n");
    
    /* Turn off motors */
    motor(LEFT_WHEEL, MOTOR_OFF);
    motor(RIGHT_WHEEL, MOTOR_OFF);
    
    /* Return 1 if successful */
    beep();
    beep();
    return SUCCESS;
    
}

//---------------------------------------------------------------------------
/* Function used to move robot in a straight line using shaft encoders */
int Move_Straight(int distanceInches, int motorDirection, int motorPowerL, int motorPowerR, 
                  int finalDestinationX, int finalDestinationY )
{
    /* Print program status for user */
    printf("MOVE_STRAIGHT FUNCTION STARTED\n");
    
    /* Calculate the required shaft encoder values */
    tempEncoderGoal = ( distanceInches * 17 ) / 10;
    
    /* Reset encoder values */
    encoder4_counts = 0;
    encoder2_counts = 0;
    
    /* Begin to move robot in direction specified at a desired speed */
    motor(RIGHT_WHEEL, motorPowerR * motorDirection);
    motor(LEFT_WHEEL, motorPowerL * motorDirection);
    printf("MOTOR STARTED\n");
    
    /* Slow motor speed when the robot has crossed a plane on the course */
    resumeMotor = ON;
    while ( resumeMotor == ON ){
        if ( GPS_Plane_Test(finalDestinationX, finalDestinationY) == SUCCESS ){
            resumeMotor = OFF;
        }
    }    
    printf("PLANE_TEST COMPLETED\n");
    
    /* Use GPS to keep heading straight while moving */
    while ( encoder2_counts + ENCODER_COUNT_BUFFER <= tempEncoderGoal ||
           encoder4_counts + ENCODER_COUNT_BUFFER <= tempEncoderGoal ) {
        /* Call on GPS function to adjust robot orientation */
        GPS_Adjust_Robot(finalHeading, motorPowerL, motorPowerR, motorDirection);    
    }
    printf("ENCODER CHECK COMPLETED\n");
    
    /* Slow down robot motor speed as destination is approached */
    motor(RIGHT_WHEEL, motorPowerR * motorDirection - MOTOR_SLOW * motorDirection );
    motor(LEFT_WHEEL, motorPowerL * motorDirection - MOTOR_SLOW * motorDirection );
    printf("ROBOT SLOWED\n");
    
    /* Set motor status and cut motors when encoder value is reached on both wheels */
    leftMotorStatus = ON;
    rightMotorStatus = ON;
    while ( !(leftMotorStatus == OFF && rightMotorStatus == OFF) ){
        if ( encoder2_counts >= tempEncoderGoal ){
            /* Turn off right wheel when goal is reached */
            motor(RIGHT_WHEEL, OFF);
            leftMotorStatus = OFF;
        }
        if ( encoder4_counts >= tempEncoderGoal  ){
            /* Turn off left motor when goal is reached */
            motor(LEFT_WHEEL, OFF);
            leftMotorStatus = OFF;
        }
    }
    
    /* Reset shaft encoder values for next function */
    encoder4_counts = 0;
    encoder2_counts = 0;
    
    /* Return that the function has terminated */
    return SUCCESS;
}

//---------------------------------------------------------------------------
/* Function used to move robot in a straight line using shaft encoders */
int Hill_Climb(int distanceInches, int motorDirection, int motorPowerL, int motorPowerR, 
                  int finalDestinationX, int finalDestinationY )
{
    /* Print program status for user */
    printf("MOVE_STRAIGHT FUNCTION STARTED\n");
    
    /* Calculate the required shafte encoder values */
    tempEncoderGoal = ( distanceInches * 17 ) / 10;
    
    /* Begin to move robot in direction specified at a desired speed */
    motor(RIGHT_WHEEL, motorPowerR * motorDirection);
    motor(LEFT_WHEEL, motorPowerL * motorDirection);
    printf("MOTOR STARTED\n");
    
    /* Slow motor speed when the robot has crossed a plane on the course */
    resumeMotor = ON;
    while ( resumeMotor == ON ){
        if ( GPS_Plane_Test(finalDestinationX, finalDestinationY) == SUCCESS ){
            resumeMotor = OFF;
        }
    }    
    printf("PLANE_TEST COMPLETED\n");
    
    /* Use GPS to keep heading straight while moving */
    while ( encoder2_counts + ENCODER_COUNT_BUFFER <= tempEncoderGoal ||
           encoder4_counts + ENCODER_COUNT_BUFFER <= tempEncoderGoal );
    printf("ENCODER CHECK COMPLETED\n");
    
    /* Slow down robot motor speed as destination is approached */
    motor(RIGHT_WHEEL, motorPowerR * motorDirection - MOTOR_SLOW * motorDirection );
    motor(LEFT_WHEEL, motorPowerL * motorDirection - MOTOR_SLOW * motorDirection );
    printf("ROBOT SLOWED\n");
    
    /* Set motor status and cut motors when encoder value is reached on both wheels */
    leftMotorStatus = ON;
    rightMotorStatus = ON;
    while ( !stop_button() && !(leftMotorStatus == OFF && rightMotorStatus == OFF) ){
        if ( encoder2_counts >= tempEncoderGoal ){
            /* Turn off right wheel when goal is reached */
            motor(RIGHT_WHEEL, OFF);
            leftMotorStatus = OFF;
        }
        if ( encoder4_counts >= tempEncoderGoal  ){
            /* Turn off left motor when goal is reached */
            motor(LEFT_WHEEL, OFF);
            leftMotorStatus = OFF;
        }
        
        /* Print status of shaft encoders */
        printf("WR: %d WL: %d\n", encoder2_counts, encoder4_counts );
    }
    
    /* Reset shaft encoder values for next function */
    encoder4_counts = 0;
    encoder2_counts = 0;
    
    /* Return that the function has terminated */
    return SUCCESS;
}

//---------------------------------------------------------------------------
/* Function will move robot in a straight line */
int Motor_Straight( int motorDirection, int totalCounts, int finalHeading, 
                   int motorLevelL, int motorLevelR, int finalDestinationX, 
                   int finalDestinationY )
{
    /* Kill motor to initialize process */
    Motor_Kill();
    
    /* Reset encoder values */
    encoder4_counts = 0;
    encoder2_counts = 0;
    
    /* Print message to signal command start */
    printf("Motor_Straight Started\n");
    
    /* Use selection statement to choose motor direction */
    if ( motorDirection == FORWARD ) {
        // Start motor functions
        motor(LEFT_WHEEL, motorLevelL);
        motor(RIGHT_WHEEL, motorLevelR);
    }
    else if ( motorDirection == BACKWARD ) {
        // Start motor functions
        motor(LEFT_WHEEL, -motorLevelL);
        motor(RIGHT_WHEEL, -motorLevelR);
    }
    
    /* Initialize operations to prepare for gps */
    resumeMotor = ON;
    
    /* Monitor motor function by assessing shaft encoder and heading */
    while( resumeMotor == ON && !stop_button()) {
        
        // Print status for encoders and the heading
        printf("L:%d R:%d  H:%d\n", encoder4_counts, encoder2_counts, gps_heading);
        
        // Check Robot Destination using shaft encoders and fine tuning with GPS 
        if ( encoder4_counts > totalCounts || encoder2_counts > totalCounts ) {
            
            /* Select between comparing the X or Y plane */
            if ( finalDestinationY == 0 ) {
                // Determine between X of negative and positive value
                if ( finalDestinationX > 0 ) {                
                    while ( gps_x < finalDestinationX ){
                        while(!gps_get_data());
                    }
                }
                else if ( finalDestinationX < 0 ) {
                    while ( gps_x < finalDestinationX ){
                        while(!gps_get_data());
                    }
                }
                // Change motor resume for reaching objective 
                resumeMotor = OFF;
            }
            else if ( finalDestinationX == 0 ) {
                // Determine between X of negative and positive value
                if ( finalDestinationY > 0 ) {                
                    while ( gps_y < finalDestinationY ){
                        while(!gps_get_data());
                    }
                }
                else if ( finalDestinationY < 0 ) {
                    while ( gps_y < finalDestinationY ){
                        while(!gps_get_data());
                    }
                } 
                /* Kill motor, because it looks like we've got a SITUATION! */
                Motor_Kill();
                resumeMotor = OFF;
            }
        }
        
        /* Check gps to make sure robot is heading at correct angle and print status */
        while( !gps_get_data() );
        printf("L:%d R:%d  H:%d\n", encoder4_counts, encoder2_counts, gps_heading);
        
        /* Adjust the heading if it is not inside the range */
        if ( ( finalHeading == 90 && !( gps_heading >= finalHeading - GPS_ERROR  && gps_heading <= finalHeading + GPS_ERROR ) || 
              ( finalHeading == 0 && !( ( gps_heading >= 179 - GPS_ERROR && gps_heading <= 179 ) || ( gps_heading <= 0 + GPS_ERROR && gps_heading >= 0 ) ) ) ) )
          {
            /* Adjust motors to keep robot in a particular heading*/
            motor(RIGHT_WHEEL, 0 );
            motor(LEFT_WHEEL, 0 );
            
            while(!gps_get_data());
            while ( ( finalHeading > gps_heading && motorDirection == FORWARD ) || 
                   ( finalHeading < gps_heading && motorDirection == BACKWARD ) ) {
                motor(RIGHT_WHEEL, 0 );
                motor(LEFT_WHEEL, 15 );
                while(!gps_get_data());
            }
            while ( ( finalHeading < gps_heading && motorDirection == FORWARD ) ||
                   ( finalHeading > gps_heading && motorDirection == BACKWARD ) )  {
                motor(RIGHT_WHEEL, 15 );
                motor(LEFT_WHEEL, 0 );
                sleep(.2);
            }
            /* Use selection statement to choose motor direction */
            if ( motorDirection == FORWARD ) {
                // Start motor functions
                motor(LEFT_WHEEL, motorLevelL);
                motor(RIGHT_WHEEL, motorLevelR);
            }
            else if ( motorDirection == BACKWARD ) {
                // Start motor functions
                motor(LEFT_WHEEL, -motorLevelL);
                motor(RIGHT_WHEEL, -motorLevelR);
            }
        }     
    }
    // /* Kill motor, because it looks like we've got a SITUATION! */
    Motor_Kill();
    
    /* Return value of test */
    return SUCCESS;
}

//---------------------------------------------------------------------------
/* Function will turn robot 90 degrees in a passed direction */
int Robot_Turn(int rotationDirection )
{   
    /* Ensure that motors are killed before starting */
    Motor_Kill();
    
    /* Reset encoder values */
    encoder4_counts = 0;
    encoder2_counts = 0;
    
    /* Print message to signal command start */
    printf("Robot_Turn Started\n");
    
    /* Get new gps data variables */
    while ( !gps_get_data() );
    
    /* Selection case to discover if final heading
       value needs to be adjusted for being out of bounds */
    if ( gps_heading < 45 && gps_heading >= 0 || gps_heading > 135 && gps_heading <= 179 ) {
        // Set to a heading of 90
        finalHeading = 90;
    }
    else if ( gps_heading >= 45 && gps_heading <= 135 ){
        finalHeading = 0;
    }
    
    /* Use rotation direction to pick motor settings */
    if ( rotationDirection == TURN_CCW ) {
        /* Start motor functions at quarter power */
        motor(LEFT_WHEEL, -MOTOR_POWER_QUARTER +10);
        motor(RIGHT_WHEEL, MOTOR_POWER_QUARTER -10);
    }
    else if ( rotationDirection == TURN_CW ) {
        /* Start motor functions at quarter power */
        motor(LEFT_WHEEL, MOTOR_POWER_QUARTER -10);
        motor(RIGHT_WHEEL, -MOTOR_POWER_QUARTER +10);
    }
    else
    {
        /* Error occured, direction not specified */
        beep();
        return FAILURE;
    }
    
    /* Process catered for special 0/180 value */
    if ( finalHeading == 0 ) {
        /* Run until resume value is changed or obstacle hit */
        while ( continueTurn == ON ) {
            /* Check gps heading to update position */
            while ( !gps_get_data() );
            
            /* Check if new value is acceptable with error */
            if ( ( 179 - GPS_ERROR <= gps_heading && gps_heading <= 179 ) ||
                ( 0 + GPS_ERROR >= gps_heading && gps_heading >= 0 ) ) {
                /* Stop all motor function */
                Motor_Kill();
                continueTurn = OFF;
            }
        }
    }
    /* Process for reaching a 90 degree heading */
    else if ( finalHeading == 90 ) {
        /* Run until resume value is changed or obstacle hit */
        while ( continueTurn == ON ) {
            /* Check gps heading to update position */
            while ( !gps_get_data() );
            
            /* Check if new value is acceptable with error */
            if ( finalHeading - GPS_ERROR <= gps_heading ||
                finalHeading + GPS_ERROR >= gps_heading ) {
                /* Stop all motor function */
                Motor_Kill();
                continueTurn = OFF;
            }
        }
    }
    
    /* Stop all motor function */
    Motor_Kill();
    
    /* Return 1 if successful */
    beep();
    beep();
    return SUCCESS;
    
}

//---------------------------------------------------------------------------
void Victory_Spin()
{
    // Print victory message
    printf("VICTORY!!!       RECYCLOPS!\n");
    
    while(!stop_button()){
        // Start motor functions and commence victory screech
        beep();
        motor(LEFT_WHEEL, 50);
        motor(RIGHT_WHEEL, -50);
        sleep(2.0);
        beep();
        motor(LEFT_WHEEL, -50);
        motor(RIGHT_WHEEL, 50);
        sleep(2.0);
    }
    
    // Stop motor functions
    motor(LEFT_WHEEL, MOTOR_OFF);
    motor(RIGHT_WHEEL, MOTOR_OFF);
    
}

