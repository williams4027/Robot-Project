/*********************************************/
/* The Magic Conch                           */
/* Team J-6                                  */
/* Begin Date: 04/21/2012                    */
/* Purpose: This program will be used to     */
/* develop motor commands for integration    */
/*********************************************/

//Libraries to be used
#use sencdr5.icb

//Definitions for motor ports and motor speeds
#define LEFT_WHEEL 3
#define RIGHT_WHEEL 1
#define MOTOR_POWER_FULL 100
#define MOTOR_POWER_CRUISE 75
#define MOTOR_POWER_HALF 50
#define MOTOR_POWER_QUARTER 25
#define TURN_CCW -1
#define TURN_CW 1
#define MOTOR_OFF 0
#define GPS_ERROR 2
#define SUCCESS 1
#define FAILURE 0

/* Function will turn off the drive train motors */
int Motor_Kill()
{
    /* Print message to signal command start */ 
    printf("Motor_Kill Started\n");
    
    /* Turn off motors */
    motor(LEFT_WHEEL, MOTOR_OFF);
    motor(RIGHT_WHEEL, MOTOR_OFF);
    
    /* Return 1 if successful */
    beep();
    beep();
    return SUCCESS;
    
}

/* Function will move robot in a straight line */
int Motor_Straight( int motorDirection, int motorLevel, int finalDestination )
{
    /* Kill motor to initialize process */
    Motor_Kill();
    
    /* Print message to signal command start */
    printf("Motor_Straight Started\n");
    
    /* Use selection statement to choose motor direction */
    if ( motorDirection == FORWARD ) {
        // Start motor functions
        motor(LEFT_WHEEL, motorLevel);
        motor(RIGHT_WHEEL, motorLevel);
        sleep(3.5);
    }
    
    /* Check shaft encoder values to update motor power */
    
    /* Check gps to make sure robot is heading at correct angle */
    
    /* Check gps to make sure robot has not arrived at destination */
    
    /* Return value of test */
}

/* Function will turn robot 90 degrees in the CCW direction */
int Robot_Turn(int rotationDirection )
{   
    /* Ensure that motors are killed before starting */
    Motor_Kill();
    
    /* Print message to signal command start */
    printf("Turn_Ninety_CCW Started\n");
    
    /* Get new gps data variables */
    while ( !gps_get_data() );
    
    /* Selection case to discover if final heading
       value needs to be adjusted for being out of bounds */
    if ( gps_heading < 45 || gps_heading > 135 ) {
        // Set to a heading of 90
        finalHeading = 90;
    }
    else if ( initialHeading <= 135 && intitialHeading >= 45 ) {
        finalHeading = 0;
    }
    
    /* Turn motor until heading is at an angle +90 degrees of
       the current position or obstacle hit and initialize sentinel */
    int resume = 1;
    
    /* Use rotation direction to pick motor settings */
    if ( rotationDirection == TURN_CCW ) {
        /* Start motor functions at quarter power */
        motor(LEFT_WHEEL, -MOTOR_POWER_QUARTER);
        motor(RIGHT_WHEEL, MOTOR_POWER_QUARTER);
    }
    else if ( rotationDirection == TURN_CW ) {
        /* Start motor functions at quarter power */
        motor(LEFT_WHEEL, MOTOR_POWER_QUARTER);
        motor(RIGHT_WHEEL, -MOTOR_POWER_QUARTER);
    }
    else
    {
        /* Error occured, direction not specified */
        beep();
        return FAILURE;
    }
    
    /* Process catered for special 0/180 value */
    if ( finalHeading == 0 ) {
        /* Run until resume value is changed or obstacle hit */
        while ( resume == 1 && !Bump_Switch_Check_All() ) {
            /* Check gps heading to update position */
            while ( !gps_get_data() );
            
            /* Check if new value is acceptable with error */
            if ( 179 - GPS_ERROR >= gps_heading ||
                0 + GPS_ERROR <= gps_heading ) {
                resume = 0;
            }
        }
    }
    /* Process for reaching a 90 degree heading */
    else if ( finalHeading == 90 ) {
        /* Run until resume value is changed or obstacle hit */
        while ( resume == 1 && !Bump_Switch_Check_All() ) {
            /* Check gps heading to update position */
            while ( !gps_get_data() );
            
            /* Check if new value is acceptable with error */
            if ( finalHeading - GPS_ERROR >= gps_heading ||
                finalHeading + GPS_ERROR <= gps_heading ) {
                resume = 0;
            }
        }
    }
    
    /* Stop all motor function */
    Motor_Kill();
    
    /* Return 1 if successful */
    beep();
    beep();
    return SUCCESS;
    
}

void Victory_Spin()
{
    // Print victory message
    printf("VICTORY!!!       RECYCLOPS!\n");
    
    while(!stop_button()){
        // Start motor functions and commence victory screech
        beep();
        motor(LEFT_WHEEL, 50);
        motor(RIGHT_WHEEL, -50);
        sleep(2.0);
        beep();
        motor(LEFT_WHEEL, -50);
        motor(RIGHT_WHEEL, 50);
        sleep(2.0);
    }
    
    // Stop motor functions
    motor(LEFT_WHEEL, MOTOR_OFF);
    motor(RIGHT_WHEEL, MOTOR_OFF);
    
}
